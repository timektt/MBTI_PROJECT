// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String        @id @default(cuid())
  name             String? // ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ)
  email            String        @unique // ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login
  emailVerified    DateTime? // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö verify email (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ)
  image            String? // URL ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  username         String?       @unique // ‡∏ä‡∏∑‡πà‡∏≠ public profile ‡πÄ‡∏ä‡πà‡∏ô /u/username
  bio              String? // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠ bio ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
  mbtiType         String? // MBTI ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (optional)
  role             String        @default("user") // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö admin (role-based access)
  quizResults      QuizResult[] // ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ MBTI
  cards            Card[] // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
  comments         Comment[] // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå
  groupMemberships GroupMember[] // ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
  accounts         Account[] // OAuth accounts (Google, GitHub, etc.)
  sessions         Session[] // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö NextAuth session
  createdAt        DateTime      @default(now()) // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£
  updatedAt        DateTime      @updatedAt // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
}

model Card {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  imageUrl    String
  comments    Comment[]
  likes       Int       @default(0)
  visibility  String    @default("public")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  quizResultId String?     @unique
  quizResult   QuizResult? @relation(fields: [quizResultId], references: [id])
}

model QuizResult {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  mbtiType    String
  scoreDetail Json
  testVersion String?
  createdAt   DateTime @default(now())

  card Card? // üîÅ ‡∏ù‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á relation
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  content   String
  parentId  String? // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö threaded comment (optional)
  createdAt DateTime @default(now())
}

model Group {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  imageUrl    String? // ‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏∏‡πà‡∏°
  members     GroupMember[]
  createdAt   DateTime      @default(now())
}

model GroupMember {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String
  joinedAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
