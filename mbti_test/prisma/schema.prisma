generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String         @unique
  emailVerified    DateTime?
  image            String?
  bio              String?
  role             String         @default("user")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  username         String?        @unique
  accounts         Account[]
  cards            Card[]
  cardLikes        CardLike[]
  comments         Comment[]
  commentLikes     CommentLike[]
  groupMemberships GroupMember[]
  notifications    Notification[]
  quizResults      QuizResult[]
  sessions         Session[]
  activities       Activity[] // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
}

model Card {
  id           String      @id @default(cuid())
  userId       String
  title        String
  description  String
  imageUrl     String
  visibility   String      @default("public")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  quizResultId String?     @unique
  quizResult   QuizResult? @relation(fields: [quizResultId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  likes        CardLike[]
  comments     Comment[]
  activities   Activity[] // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

  @@index([userId])
}

model QuizResult {
  id          String   @id @default(cuid())
  userId      String
  mbtiType    String
  scoreDetail Json
  testVersion String?
  createdAt   DateTime @default(now())
  card        Card?
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Comment {
  id        String        @id @default(cuid())
  userId    String
  cardId    String
  content   String
  parentId  String?
  createdAt DateTime      @default(now())
  card      Card          @relation(fields: [cardId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  likes     CommentLike[]

  @@index([userId])
  @@index([cardId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model CardLike {
  id        String   @id @default(cuid())
  userId    String
  cardId    String
  source    String   @default("unknown") // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, cardId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  link      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Activity {
  id        String   @id @default(cuid())
  type      String // ‡πÄ‡∏ä‡πà‡∏ô "like", "comment", "create_card"
  message   String // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á ‡πÄ‡∏ä‡πà‡∏ô "John liked your card"
  userId    String // ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ó‡∏≥ action
  user      User     @relation(fields: [userId], references: [id])
  cardId    String? // optional: ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î
  card      Card?    @relation(fields: [cardId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([cardId])
}

model Group {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  imageUrl    String?
  createdAt   DateTime      @default(now())
  members     GroupMember[]
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
