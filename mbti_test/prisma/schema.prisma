// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String   @unique
  emailVerified     DateTime?
  image             String?
  bio               String?
  mbtiType          String?
  role              String   @default("user")
  quizResults       QuizResult[]
  cards             Card[]
  comments          Comment[]
  groupMemberships  GroupMember[]
  accounts          Account[]      // üëà ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö NextAuth
  sessions          Session[]      // üëà ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö NextAuth
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model QuizResult {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  mbtiType    String
  scoreDetail Json
  testVersion String?
  createdAt   DateTime @default(now())
}

model Card {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  imageUrl    String
  comments    Comment[]
  likes       Int      @default(0)
  visibility  String   @default("public")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  content   String
  parentId  String?
  createdAt DateTime @default(now())
}

model Group {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  members     GroupMember[]
  createdAt   DateTime @default(now())
}

model GroupMember {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  joinedAt  DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?    
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
